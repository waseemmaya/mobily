{"dependencies":[{"name":"../core/exceptions/CustomError","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  var CustomError_1 = _$$_REQUIRE(_dependencyMap[0], \"../core/exceptions/CustomError\");\n\n  var BinarySearch = function () {\n    function BinarySearch() {}\n\n    BinarySearch.findClosestHigherValueIndex = function (size, targetValue, valueExtractor) {\n      var low = 0;\n      var high = size - 1;\n      var mid = Math.floor((low + high) / 2);\n      var lastValue = 0;\n      var absoluteLastDiff = Math.abs(valueExtractor(mid) - targetValue);\n      var result = mid;\n      var diff = 0;\n      var absoluteDiff = 0;\n\n      if (absoluteLastDiff === 0) {\n        return result;\n      }\n\n      if (high < 0) {\n        throw new CustomError_1.default({\n          message: \"The collection cannot be empty\",\n          type: \"InvalidStateException\"\n        });\n      }\n\n      while (low <= high) {\n        mid = Math.floor((low + high) / 2);\n        lastValue = valueExtractor(mid);\n        diff = lastValue - targetValue;\n        absoluteDiff = Math.abs(diff);\n\n        if (diff >= 0 && absoluteDiff < absoluteLastDiff) {\n          absoluteLastDiff = absoluteDiff;\n          result = mid;\n        }\n\n        if (targetValue < lastValue) {\n          high = mid - 1;\n        } else if (targetValue > lastValue) {\n          low = mid + 1;\n        } else {\n          return mid;\n        }\n      }\n\n      return result;\n    };\n\n    BinarySearch.findClosestValueToTarget = function (values, target) {\n      var low = 0;\n      var high = values.length - 1;\n      var mid = Math.floor((low + high) / 2);\n      var midValue = values[mid];\n      var lastMidValue = midValue + 1;\n\n      while (low <= high && midValue !== lastMidValue) {\n        if (midValue === target) {\n          break;\n        } else if (midValue < target) {\n          low = mid;\n        } else if (midValue > target) {\n          high = mid;\n        }\n\n        mid = Math.floor((low + high) / 2);\n        lastMidValue = midValue;\n        midValue = values[mid];\n      }\n\n      return {\n        value: midValue,\n        index: mid\n      };\n    };\n\n    BinarySearch.findValueSmallerThanTarget = function (values, target) {\n      var low = 0;\n      var high = values.length - 1;\n\n      if (target > values[high]) {\n        return {\n          value: values[high],\n          index: high\n        };\n      } else if (target < values[low]) {\n        return undefined;\n      }\n\n      var midValueAndIndex = this.findClosestValueToTarget(values, target);\n      var midValue = midValueAndIndex.value;\n      var mid = midValueAndIndex.index;\n\n      if (midValue <= target) {\n        return {\n          value: midValue,\n          index: mid\n        };\n      } else {\n        return {\n          value: values[mid - 1],\n          index: mid - 1\n        };\n      }\n    };\n\n    BinarySearch.findValueLargerThanTarget = function (values, target) {\n      var low = 0;\n      var high = values.length - 1;\n\n      if (target < values[low]) {\n        return {\n          value: values[low],\n          index: low\n        };\n      } else if (target > values[high]) {\n        return undefined;\n      }\n\n      var midValueAndIndex = this.findClosestValueToTarget(values, target);\n      var midValue = midValueAndIndex.value;\n      var mid = midValueAndIndex.index;\n\n      if (midValue >= target) {\n        return {\n          value: midValue,\n          index: mid\n        };\n      } else {\n        return {\n          value: values[mid + 1],\n          index: mid + 1\n        };\n      }\n    };\n\n    BinarySearch.findIndexOf = function (array, value) {\n      var j = 0;\n      var length = array.length;\n      var i = 0;\n\n      while (j < length) {\n        i = length + j - 1 >> 1;\n\n        if (value > array[i]) {\n          j = i + 1;\n        } else if (value < array[i]) {\n          length = i;\n        } else {\n          return i;\n        }\n      }\n\n      return -1;\n    };\n\n    return BinarySearch;\n  }();\n\n  exports.default = BinarySearch;\n});","map":[[2,0,1,0],[4,0,2,0,"Object"],[4,2,2,0,"Object"],[4,8,2,6],[4,9,2,7,"defineProperty"],[4,23,2,0],[4,24,2,22,"exports"],[4,31,2,0],[4,33,2,31],[4,45,2,0],[4,47,2,45],[5,0,2,47,"value"],[5,4,2,47,"value"],[5,9,2,52],[5,11,2,54],[6,0,2,45],[6,3,2,0],[8,0,3,0],[8,6,3,4,"CustomError_1"],[8,19,3,17],[8,22,3,20,"require"],[8,33,3,27],[8,86,3,0],[10,0,4,0],[10,6,4,4,"BinarySearch"],[10,18,4,16],[10,21,4,34],[10,33,4,46],[11,0,5,4],[11,13,5,13,"BinarySearch"],[11,25,5,4],[11,28,5,28],[11,29,6,5],[13,0,7,4,"BinarySearch"],[13,4,7,4,"BinarySearch"],[13,16,7,16],[13,17,7,17,"findClosestHigherValueIndex"],[13,44,7,4],[13,47,7,47],[13,57,7,57,"size"],[13,61,7,47],[13,63,7,63,"targetValue"],[13,74,7,47],[13,76,7,76,"valueExtractor"],[13,90,7,47],[13,92,7,92],[14,0,8,8],[14,10,8,12,"low"],[14,13,8,15],[14,16,8,18],[14,17,8,8],[15,0,9,8],[15,10,9,12,"high"],[15,14,9,16],[15,17,9,19,"size"],[15,21,9,23],[15,24,9,26],[15,25,9,8],[16,0,10,8],[16,10,10,12,"mid"],[16,13,10,15],[16,16,10,18,"Math"],[16,20,10,22],[16,21,10,23,"floor"],[16,26,10,18],[16,27,10,29],[16,28,10,30,"low"],[16,31,10,33],[16,34,10,36,"high"],[16,38,10,29],[16,42,10,44],[16,43,10,18],[16,44,10,8],[17,0,11,8],[17,10,11,12,"lastValue"],[17,19,11,21],[17,22,11,24],[17,23,11,8],[18,0,12,8],[18,10,12,12,"absoluteLastDiff"],[18,26,12,28],[18,29,12,31,"Math"],[18,33,12,35],[18,34,12,36,"abs"],[18,37,12,31],[18,38,12,40,"valueExtractor"],[18,52,12,54],[18,53,12,55,"mid"],[18,56,12,54],[18,57,12,40],[18,60,12,62,"targetValue"],[18,71,12,31],[18,72,12,8],[19,0,13,8],[19,10,13,12,"result"],[19,16,13,18],[19,19,13,21,"mid"],[19,22,13,8],[20,0,14,8],[20,10,14,12,"diff"],[20,14,14,16],[20,17,14,19],[20,18,14,8],[21,0,15,8],[21,10,15,12,"absoluteDiff"],[21,22,15,24],[21,25,15,27],[21,26,15,8],[23,0,16,8],[23,10,16,12,"absoluteLastDiff"],[23,26,16,28],[23,31,16,33],[23,32,16,8],[23,34,16,36],[24,0,17,12],[24,15,17,19,"result"],[24,21,17,12],[25,0,18,9],[27,0,19,8],[27,10,19,12,"high"],[27,14,19,16],[27,17,19,19],[27,18,19,8],[27,20,19,22],[28,0,20,12],[28,14,20,18],[28,18,20,22,"CustomError_1"],[28,31,20,35],[28,32,20,36,"default"],[28,39,20,18],[28,40,20,44],[29,0,21,16,"message"],[29,10,21,16,"message"],[29,17,21,23],[29,19,21,25],[29,51,20,44],[30,0,22,16,"type"],[30,10,22,16,"type"],[30,14,22,20],[30,16,22,22],[31,0,20,44],[31,9,20,18],[31,10,20,12],[32,0,24,9],[34,0,25,8],[34,13,25,15,"low"],[34,16,25,18],[34,20,25,22,"high"],[34,24,25,8],[34,26,25,28],[35,0,26,12,"mid"],[35,8,26,12,"mid"],[35,11,26,15],[35,14,26,18,"Math"],[35,18,26,22],[35,19,26,23,"floor"],[35,24,26,18],[35,25,26,29],[35,26,26,30,"low"],[35,29,26,33],[35,32,26,36,"high"],[35,36,26,29],[35,40,26,44],[35,41,26,18],[35,42,26,12],[36,0,27,12,"lastValue"],[36,8,27,12,"lastValue"],[36,17,27,21],[36,20,27,24,"valueExtractor"],[36,34,27,38],[36,35,27,39,"mid"],[36,38,27,38],[36,39,27,12],[37,0,28,12,"diff"],[37,8,28,12,"diff"],[37,12,28,16],[37,15,28,19,"lastValue"],[37,24,28,28],[37,27,28,31,"targetValue"],[37,38,28,12],[38,0,29,12,"absoluteDiff"],[38,8,29,12,"absoluteDiff"],[38,20,29,24],[38,23,29,27,"Math"],[38,27,29,31],[38,28,29,32,"abs"],[38,31,29,27],[38,32,29,36,"diff"],[38,36,29,27],[38,37,29,12],[40,0,30,12],[40,12,30,16,"diff"],[40,16,30,20],[40,20,30,24],[40,21,30,16],[40,25,30,29,"absoluteDiff"],[40,37,30,41],[40,40,30,44,"absoluteLastDiff"],[40,56,30,12],[40,58,30,62],[41,0,31,16,"absoluteLastDiff"],[41,10,31,16,"absoluteLastDiff"],[41,26,31,32],[41,29,31,35,"absoluteDiff"],[41,41,31,16],[42,0,32,16,"result"],[42,10,32,16,"result"],[42,16,32,22],[42,19,32,25,"mid"],[42,22,32,16],[43,0,33,13],[45,0,34,12],[45,12,34,16,"targetValue"],[45,23,34,27],[45,26,34,30,"lastValue"],[45,35,34,12],[45,37,34,41],[46,0,35,16,"high"],[46,10,35,16,"high"],[46,14,35,20],[46,17,35,23,"mid"],[46,20,35,26],[46,23,35,29],[46,24,35,16],[47,0,36,13],[47,9,34,12],[47,15,37,17],[47,19,37,21,"targetValue"],[47,30,37,32],[47,33,37,35,"lastValue"],[47,42,37,17],[47,44,37,46],[48,0,38,16,"low"],[48,10,38,16,"low"],[48,13,38,19],[48,16,38,22,"mid"],[48,19,38,25],[48,22,38,28],[48,23,38,16],[49,0,39,13],[49,9,37,17],[49,15,40,17],[50,0,41,16],[50,17,41,23,"mid"],[50,20,41,16],[51,0,42,13],[52,0,43,9],[54,0,44,8],[54,13,44,15,"result"],[54,19,44,8],[55,0,45,5],[55,5,7,4],[57,0,46,4,"BinarySearch"],[57,4,46,4,"BinarySearch"],[57,16,46,16],[57,17,46,17,"findClosestValueToTarget"],[57,41,46,4],[57,44,46,44],[57,54,46,54,"values"],[57,60,46,44],[57,62,46,62,"target"],[57,68,46,44],[57,70,46,70],[58,0,47,8],[58,10,47,12,"low"],[58,13,47,15],[58,16,47,18],[58,17,47,8],[59,0,48,8],[59,10,48,12,"high"],[59,14,48,16],[59,17,48,19,"values"],[59,23,48,25],[59,24,48,26,"length"],[59,30,48,19],[59,33,48,35],[59,34,48,8],[60,0,49,8],[60,10,49,12,"mid"],[60,13,49,15],[60,16,49,18,"Math"],[60,20,49,22],[60,21,49,23,"floor"],[60,26,49,18],[60,27,49,29],[60,28,49,30,"low"],[60,31,49,33],[60,34,49,36,"high"],[60,38,49,29],[60,42,49,44],[60,43,49,18],[60,44,49,8],[61,0,50,8],[61,10,50,12,"midValue"],[61,18,50,20],[61,21,50,23,"values"],[61,27,50,29],[61,28,50,30,"mid"],[61,31,50,29],[61,32,50,8],[62,0,51,8],[62,10,51,12,"lastMidValue"],[62,22,51,24],[62,25,51,27,"midValue"],[62,33,51,35],[62,36,51,38],[62,37,51,8],[64,0,52,8],[64,13,52,15,"low"],[64,16,52,18],[64,20,52,22,"high"],[64,24,52,15],[64,28,52,30,"midValue"],[64,36,52,38],[64,41,52,43,"lastMidValue"],[64,53,52,8],[64,55,52,57],[65,0,53,12],[65,12,53,16,"midValue"],[65,20,53,24],[65,25,53,29,"target"],[65,31,53,12],[65,33,53,37],[66,0,54,16],[67,0,55,13],[67,9,53,12],[67,15,56,17],[67,19,56,21,"midValue"],[67,27,56,29],[67,30,56,32,"target"],[67,36,56,17],[67,38,56,40],[68,0,57,16,"low"],[68,10,57,16,"low"],[68,13,57,19],[68,16,57,22,"mid"],[68,19,57,16],[69,0,58,13],[69,9,56,17],[69,15,59,17],[69,19,59,21,"midValue"],[69,27,59,29],[69,30,59,32,"target"],[69,36,59,17],[69,38,59,40],[70,0,60,16,"high"],[70,10,60,16,"high"],[70,14,60,20],[70,17,60,23,"mid"],[70,20,60,16],[71,0,61,13],[73,0,62,12,"mid"],[73,8,62,12,"mid"],[73,11,62,15],[73,14,62,18,"Math"],[73,18,62,22],[73,19,62,23,"floor"],[73,24,62,18],[73,25,62,29],[73,26,62,30,"low"],[73,29,62,33],[73,32,62,36,"high"],[73,36,62,29],[73,40,62,44],[73,41,62,18],[73,42,62,12],[74,0,63,12,"lastMidValue"],[74,8,63,12,"lastMidValue"],[74,20,63,24],[74,23,63,27,"midValue"],[74,31,63,12],[75,0,64,12,"midValue"],[75,8,64,12,"midValue"],[75,16,64,20],[75,19,64,23,"values"],[75,25,64,29],[75,26,64,30,"mid"],[75,29,64,29],[75,30,64,12],[76,0,65,9],[78,0,66,8],[78,13,66,15],[79,0,67,12,"value"],[79,8,67,12,"value"],[79,13,67,17],[79,15,67,19,"midValue"],[79,23,66,15],[80,0,68,12,"index"],[80,8,68,12,"index"],[80,13,68,17],[80,15,68,19,"mid"],[81,0,66,15],[81,7,66,8],[82,0,70,5],[82,5,46,4],[84,0,74,4,"BinarySearch"],[84,4,74,4,"BinarySearch"],[84,16,74,16],[84,17,74,17,"findValueSmallerThanTarget"],[84,43,74,4],[84,46,74,46],[84,56,74,56,"values"],[84,62,74,46],[84,64,74,64,"target"],[84,70,74,46],[84,72,74,72],[85,0,75,8],[85,10,75,12,"low"],[85,13,75,15],[85,16,75,18],[85,17,75,8],[86,0,76,8],[86,10,76,12,"high"],[86,14,76,16],[86,17,76,19,"values"],[86,23,76,25],[86,24,76,26,"length"],[86,30,76,19],[86,33,76,35],[86,34,76,8],[88,0,77,8],[88,10,77,12,"target"],[88,16,77,18],[88,19,77,21,"values"],[88,25,77,27],[88,26,77,28,"high"],[88,30,77,27],[88,31,77,8],[88,33,77,35],[89,0,78,12],[89,15,78,19],[90,0,79,16,"value"],[90,10,79,16,"value"],[90,15,79,21],[90,17,79,23,"values"],[90,23,79,29],[90,24,79,30,"high"],[90,28,79,29],[90,29,78,19],[91,0,80,16,"index"],[91,10,80,16,"index"],[91,15,80,21],[91,17,80,23,"high"],[92,0,78,19],[92,9,78,12],[93,0,82,9],[93,7,77,8],[93,13,83,13],[93,17,83,17,"target"],[93,23,83,23],[93,26,83,26,"values"],[93,32,83,32],[93,33,83,33,"low"],[93,36,83,32],[93,37,83,13],[93,39,83,39],[94,0,84,12],[94,15,84,19,"undefined"],[94,24,84,12],[95,0,85,9],[97,0,86,8],[97,10,86,12,"midValueAndIndex"],[97,26,86,28],[97,29,86,31],[97,34,86,36,"findClosestValueToTarget"],[97,58,86,31],[97,59,86,61,"values"],[97,65,86,31],[97,67,86,69,"target"],[97,73,86,31],[97,74,86,8],[98,0,87,8],[98,10,87,12,"midValue"],[98,18,87,20],[98,21,87,23,"midValueAndIndex"],[98,37,87,39],[98,38,87,40,"value"],[98,43,87,8],[99,0,88,8],[99,10,88,12,"mid"],[99,13,88,15],[99,16,88,18,"midValueAndIndex"],[99,32,88,34],[99,33,88,35,"index"],[99,38,88,8],[101,0,89,8],[101,10,89,12,"midValue"],[101,18,89,20],[101,22,89,24,"target"],[101,28,89,8],[101,30,89,32],[102,0,90,12],[102,15,90,19],[103,0,91,16,"value"],[103,10,91,16,"value"],[103,15,91,21],[103,17,91,23,"midValue"],[103,25,90,19],[104,0,92,16,"index"],[104,10,92,16,"index"],[104,15,92,21],[104,17,92,23,"mid"],[105,0,90,19],[105,9,90,12],[106,0,94,9],[106,7,89,8],[106,13,95,13],[107,0,96,12],[107,15,96,19],[108,0,97,16,"value"],[108,10,97,16,"value"],[108,15,97,21],[108,17,97,23,"values"],[108,23,97,29],[108,24,97,30,"mid"],[108,27,97,33],[108,30,97,36],[108,31,97,29],[108,32,96,19],[109,0,98,16,"index"],[109,10,98,16,"index"],[109,15,98,21],[109,17,98,23,"mid"],[109,20,98,26],[109,23,98,29],[110,0,96,19],[110,9,96,12],[111,0,100,9],[112,0,101,5],[112,5,74,4],[114,0,105,4,"BinarySearch"],[114,4,105,4,"BinarySearch"],[114,16,105,16],[114,17,105,17,"findValueLargerThanTarget"],[114,42,105,4],[114,45,105,45],[114,55,105,55,"values"],[114,61,105,45],[114,63,105,63,"target"],[114,69,105,45],[114,71,105,71],[115,0,106,8],[115,10,106,12,"low"],[115,13,106,15],[115,16,106,18],[115,17,106,8],[116,0,107,8],[116,10,107,12,"high"],[116,14,107,16],[116,17,107,19,"values"],[116,23,107,25],[116,24,107,26,"length"],[116,30,107,19],[116,33,107,35],[116,34,107,8],[118,0,108,8],[118,10,108,12,"target"],[118,16,108,18],[118,19,108,21,"values"],[118,25,108,27],[118,26,108,28,"low"],[118,29,108,27],[118,30,108,8],[118,32,108,34],[119,0,109,12],[119,15,109,19],[120,0,110,16,"value"],[120,10,110,16,"value"],[120,15,110,21],[120,17,110,23,"values"],[120,23,110,29],[120,24,110,30,"low"],[120,27,110,29],[120,28,109,19],[121,0,111,16,"index"],[121,10,111,16,"index"],[121,15,111,21],[121,17,111,23,"low"],[122,0,109,19],[122,9,109,12],[123,0,113,9],[123,7,108,8],[123,13,114,13],[123,17,114,17,"target"],[123,23,114,23],[123,26,114,26,"values"],[123,32,114,32],[123,33,114,33,"high"],[123,37,114,32],[123,38,114,13],[123,40,114,40],[124,0,115,12],[124,15,115,19,"undefined"],[124,24,115,12],[125,0,116,9],[127,0,117,8],[127,10,117,12,"midValueAndIndex"],[127,26,117,28],[127,29,117,31],[127,34,117,36,"findClosestValueToTarget"],[127,58,117,31],[127,59,117,61,"values"],[127,65,117,31],[127,67,117,69,"target"],[127,73,117,31],[127,74,117,8],[128,0,118,8],[128,10,118,12,"midValue"],[128,18,118,20],[128,21,118,23,"midValueAndIndex"],[128,37,118,39],[128,38,118,40,"value"],[128,43,118,8],[129,0,119,8],[129,10,119,12,"mid"],[129,13,119,15],[129,16,119,18,"midValueAndIndex"],[129,32,119,34],[129,33,119,35,"index"],[129,38,119,8],[131,0,120,8],[131,10,120,12,"midValue"],[131,18,120,20],[131,22,120,24,"target"],[131,28,120,8],[131,30,120,32],[132,0,121,12],[132,15,121,19],[133,0,122,16,"value"],[133,10,122,16,"value"],[133,15,122,21],[133,17,122,23,"midValue"],[133,25,121,19],[134,0,123,16,"index"],[134,10,123,16,"index"],[134,15,123,21],[134,17,123,23,"mid"],[135,0,121,19],[135,9,121,12],[136,0,125,9],[136,7,120,8],[136,13,126,13],[137,0,127,12],[137,15,127,19],[138,0,128,16,"value"],[138,10,128,16,"value"],[138,15,128,21],[138,17,128,23,"values"],[138,23,128,29],[138,24,128,30,"mid"],[138,27,128,33],[138,30,128,36],[138,31,128,29],[138,32,127,19],[139,0,129,16,"index"],[139,10,129,16,"index"],[139,15,129,21],[139,17,129,23,"mid"],[139,20,129,26],[139,23,129,29],[140,0,127,19],[140,9,127,12],[141,0,131,9],[142,0,132,5],[142,5,105,4],[144,0,133,4,"BinarySearch"],[144,4,133,4,"BinarySearch"],[144,16,133,16],[144,17,133,17,"findIndexOf"],[144,28,133,4],[144,31,133,31],[144,41,133,41,"array"],[144,46,133,31],[144,48,133,48,"value"],[144,53,133,31],[144,55,133,55],[145,0,134,8],[145,10,134,12,"j"],[145,11,134,13],[145,14,134,16],[145,15,134,8],[146,0,135,8],[146,10,135,12,"length"],[146,16,135,18],[146,19,135,21,"array"],[146,24,135,26],[146,25,135,27,"length"],[146,31,135,8],[147,0,136,8],[147,10,136,12,"i"],[147,11,136,13],[147,14,136,16],[147,15,136,8],[149,0,137,8],[149,13,137,15,"j"],[149,14,137,16],[149,17,137,19,"length"],[149,23,137,8],[149,25,137,27],[150,0,138,12,"i"],[150,8,138,12,"i"],[150,9,138,13],[150,12,138,16,"length"],[150,18,138,22],[150,21,138,25,"j"],[150,22,138,16],[150,25,138,29],[150,26,138,16],[150,30,138,34],[150,31,138,12],[152,0,139,12],[152,12,139,16,"value"],[152,17,139,21],[152,20,139,24,"array"],[152,25,139,29],[152,26,139,30,"i"],[152,27,139,29],[152,28,139,12],[152,30,139,34],[153,0,140,16,"j"],[153,10,140,16,"j"],[153,11,140,17],[153,14,140,20,"i"],[153,15,140,21],[153,18,140,24],[153,19,140,16],[154,0,141,13],[154,9,139,12],[154,15,142,17],[154,19,142,21,"value"],[154,24,142,26],[154,27,142,29,"array"],[154,32,142,34],[154,33,142,35,"i"],[154,34,142,34],[154,35,142,17],[154,37,142,39],[155,0,143,16,"length"],[155,10,143,16,"length"],[155,16,143,22],[155,19,143,25,"i"],[155,20,143,16],[156,0,144,13],[156,9,142,17],[156,15,145,17],[157,0,146,16],[157,17,146,23,"i"],[157,18,146,16],[158,0,147,13],[159,0,148,9],[161,0,149,8],[161,13,149,15],[161,14,149,16],[161,15,149,8],[162,0,150,5],[162,5,133,4],[164,0,151,4],[164,11,151,11,"BinarySearch"],[164,23,151,4],[165,0,152,1],[165,3,4,34],[165,5,4,0],[167,0,153,0,"exports"],[167,2,153,0,"exports"],[167,9,153,7],[167,10,153,8,"default"],[167,17,153,0],[167,20,153,18,"BinarySearch"],[167,32,153,0]]},"type":"js/module"}]}