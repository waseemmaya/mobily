{"dependencies":[{"name":"@babel/runtime/helpers/defineProperty","data":{"isAsync":false}},{"name":"fbjs/lib/invariant","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  var _defineProperty = _$$_REQUIRE(_dependencyMap[0], \"@babel/runtime/helpers/defineProperty\");\n\n  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\n  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n  var invariant = _$$_REQUIRE(_dependencyMap[1], \"fbjs/lib/invariant\");\n\n  var NavigationStateUtils = {\n    get: function get(state, key) {\n      return state.routes.find(function (route) {\n        return route.key === key;\n      }) || null;\n    },\n    indexOf: function indexOf(state, key) {\n      return state.routes.map(function (route) {\n        return route.key;\n      }).indexOf(key);\n    },\n    has: function has(state, key) {\n      return !!state.routes.some(function (route) {\n        return route.key === key;\n      });\n    },\n    push: function push(state, route) {\n      invariant(NavigationStateUtils.indexOf(state, route.key) === -1, 'should not push route with duplicated key %s', route.key);\n      var routes = state.routes.slice();\n      routes.push(route);\n      return _objectSpread({}, state, {\n        index: routes.length - 1,\n        routes: routes\n      });\n    },\n    pop: function pop(state) {\n      if (state.index <= 0) {\n        return state;\n      }\n\n      var routes = state.routes.slice(0, -1);\n      return _objectSpread({}, state, {\n        index: routes.length - 1,\n        routes: routes\n      });\n    },\n    jumpToIndex: function jumpToIndex(state, index) {\n      if (index === state.index) {\n        return state;\n      }\n\n      invariant(!!state.routes[index], 'invalid index %s to jump to', index);\n      return _objectSpread({}, state, {\n        index: index\n      });\n    },\n    jumpTo: function jumpTo(state, key) {\n      var index = NavigationStateUtils.indexOf(state, key);\n      return NavigationStateUtils.jumpToIndex(state, index);\n    },\n    back: function back(state) {\n      var index = state.index - 1;\n      var route = state.routes[index];\n      return route ? NavigationStateUtils.jumpToIndex(state, index) : state;\n    },\n    forward: function forward(state) {\n      var index = state.index + 1;\n      var route = state.routes[index];\n      return route ? NavigationStateUtils.jumpToIndex(state, index) : state;\n    },\n    replaceAt: function replaceAt(state, key, route) {\n      var index = NavigationStateUtils.indexOf(state, key);\n      return NavigationStateUtils.replaceAtIndex(state, index, route);\n    },\n    replaceAtIndex: function replaceAtIndex(state, index, route) {\n      invariant(!!state.routes[index], 'invalid index %s for replacing route %s', index, route.key);\n\n      if (state.routes[index] === route) {\n        return state;\n      }\n\n      var routes = state.routes.slice();\n      routes[index] = route;\n      return _objectSpread({}, state, {\n        index: index,\n        routes: routes\n      });\n    },\n    reset: function reset(state, routes, index) {\n      invariant(routes.length && Array.isArray(routes), 'invalid routes to replace');\n      var nextIndex = index === undefined ? routes.length - 1 : index;\n\n      if (state.routes.length === routes.length && state.index === nextIndex) {\n        var compare = function compare(route, ii) {\n          return routes[ii] === route;\n        };\n\n        if (state.routes.every(compare)) {\n          return state;\n        }\n      }\n\n      invariant(!!routes[nextIndex], 'invalid index %s to reset', nextIndex);\n      return _objectSpread({}, state, {\n        index: nextIndex,\n        routes: routes\n      });\n    }\n  };\n  module.exports = NavigationStateUtils;\n});","map":[[2,0,11,0],[10,0,13,0],[10,6,13,6,"invariant"],[10,15,13,15],[10,18,13,18,"require"],[10,29,13,25],[10,70,13,0],[12,0,28,0],[12,6,28,6,"NavigationStateUtils"],[12,26,28,26],[12,29,28,29],[13,0,33,2,"get"],[13,4,33,2,"get"],[13,7,28,29],[13,22,33,6,"state"],[13,27,28,29],[13,29,33,30,"key"],[13,32,28,29],[13,34,33,61],[14,0,34,4],[14,13,34,11,"state"],[14,18,34,16],[14,19,34,17,"routes"],[14,25,34,11],[14,26,34,24,"find"],[14,30,34,11],[14,31,34,29],[14,41,34,29,"route"],[14,46,34,34],[15,0,34,34],[15,15,34,38,"route"],[15,20,34,43],[15,21,34,44,"key"],[15,24,34,38],[15,29,34,52,"key"],[15,32,34,34],[16,0,34,34],[16,7,34,11],[16,12,34,60],[16,16,34,4],[17,0,35,3],[17,5,28,29],[18,0,41,2,"indexOf"],[18,4,41,2,"indexOf"],[18,11,28,29],[18,30,41,10,"state"],[18,35,28,29],[18,37,41,34,"key"],[18,40,28,29],[18,42,41,55],[19,0,42,4],[19,13,42,11,"state"],[19,18,42,16],[19,19,42,17,"routes"],[19,25,42,11],[19,26,42,24,"map"],[19,29,42,11],[19,30,42,28],[19,40,42,28,"route"],[19,45,42,33],[20,0,42,33],[20,15,42,37,"route"],[20,20,42,42],[20,21,42,43,"key"],[20,24,42,33],[21,0,42,33],[21,7,42,11],[21,9,42,48,"indexOf"],[21,16,42,11],[21,17,42,56,"key"],[21,20,42,11],[21,21,42,4],[22,0,43,3],[22,5,28,29],[23,0,49,2,"has"],[23,4,49,2,"has"],[23,7,28,29],[23,22,49,6,"state"],[23,27,28,29],[23,29,49,30,"key"],[23,32,28,29],[23,34,49,52],[24,0,50,4],[24,13,50,11],[24,14,50,12],[24,15,50,13,"state"],[24,20,50,18],[24,21,50,19,"routes"],[24,27,50,13],[24,28,50,26,"some"],[24,32,50,13],[24,33,50,31],[24,43,50,31,"route"],[24,48,50,36],[25,0,50,36],[25,15,50,40,"route"],[25,20,50,45],[25,21,50,46,"key"],[25,24,50,40],[25,29,50,54,"key"],[25,32,50,36],[26,0,50,36],[26,7,50,13],[26,8,50,4],[27,0,51,3],[27,5,28,29],[28,0,58,2,"push"],[28,4,58,2,"push"],[28,8,28,29],[28,24,58,7,"state"],[28,29,28,29],[28,31,58,31,"route"],[28,36,28,29],[28,38,58,72],[29,0,59,4,"invariant"],[29,6,59,4,"invariant"],[29,15,59,13],[29,16,60,6,"NavigationStateUtils"],[29,36,60,26],[29,37,60,27,"indexOf"],[29,44,60,6],[29,45,60,35,"state"],[29,50,60,6],[29,52,60,42,"route"],[29,57,60,47],[29,58,60,48,"key"],[29,61,60,6],[29,67,60,57],[29,68,60,58],[29,69,59,13],[29,71,61,6],[29,117,59,13],[29,119,62,6,"route"],[29,124,62,11],[29,125,62,12,"key"],[29,128,59,13],[29,129,59,4],[30,0,65,4],[30,10,65,10,"routes"],[30,16,65,16],[30,19,65,19,"state"],[30,24,65,24],[30,25,65,25,"routes"],[30,31,65,19],[30,32,65,32,"slice"],[30,37,65,19],[30,39,65,4],[31,0,66,4,"routes"],[31,6,66,4,"routes"],[31,12,66,10],[31,13,66,11,"push"],[31,17,66,4],[31,18,66,16,"route"],[31,23,66,4],[32,0,68,4],[32,31,69,9,"state"],[32,36,68,4],[33,0,70,6,"index"],[33,8,70,6,"index"],[33,13,70,11],[33,15,70,13,"routes"],[33,21,70,19],[33,22,70,20,"length"],[33,28,70,13],[33,31,70,29],[33,32,68,4],[34,0,71,6,"routes"],[34,8,71,6,"routes"],[34,14,71,12],[34,16,71,6,"routes"],[35,0,68,4],[36,0,73,3],[36,5,28,29],[37,0,80,2,"pop"],[37,4,80,2,"pop"],[37,7,28,29],[37,22,80,6,"state"],[37,27,28,29],[37,29,80,47],[38,0,81,4],[38,10,81,8,"state"],[38,15,81,13],[38,16,81,14,"index"],[38,21,81,8],[38,25,81,23],[38,26,81,4],[38,28,81,26],[39,0,83,6],[39,15,83,13,"state"],[39,20,83,6],[40,0,84,5],[42,0,85,4],[42,10,85,10,"routes"],[42,16,85,16],[42,19,85,19,"state"],[42,24,85,24],[42,25,85,25,"routes"],[42,31,85,19],[42,32,85,32,"slice"],[42,37,85,19],[42,38,85,38],[42,39,85,19],[42,41,85,41],[42,42,85,42],[42,43,85,19],[42,44,85,4],[43,0,86,4],[43,31,87,9,"state"],[43,36,86,4],[44,0,88,6,"index"],[44,8,88,6,"index"],[44,13,88,11],[44,15,88,13,"routes"],[44,21,88,19],[44,22,88,20,"length"],[44,28,88,13],[44,31,88,29],[44,32,86,4],[45,0,89,6,"routes"],[45,8,89,6,"routes"],[45,14,89,12],[45,16,89,6,"routes"],[46,0,86,4],[47,0,91,3],[47,5,28,29],[48,0,96,2,"jumpToIndex"],[48,4,96,2,"jumpToIndex"],[48,15,28,29],[48,38,96,14,"state"],[48,43,28,29],[48,45,96,38,"index"],[48,50,28,29],[48,52,96,70],[49,0,97,4],[49,10,97,8,"index"],[49,15,97,13],[49,20,97,18,"state"],[49,25,97,23],[49,26,97,24,"index"],[49,31,97,4],[49,33,97,31],[50,0,98,6],[50,15,98,13,"state"],[50,20,98,6],[51,0,99,5],[53,0,101,4,"invariant"],[53,6,101,4,"invariant"],[53,15,101,13],[53,16,101,14],[53,17,101,15],[53,18,101,16,"state"],[53,23,101,21],[53,24,101,22,"routes"],[53,30,101,16],[53,31,101,29,"index"],[53,36,101,16],[53,37,101,13],[53,39,101,37],[53,68,101,13],[53,70,101,68,"index"],[53,75,101,13],[53,76,101,4],[54,0,103,4],[54,31,104,9,"state"],[54,36,103,4],[55,0,105,6,"index"],[55,8,105,6,"index"],[55,13,105,11],[55,15,105,6,"index"],[56,0,103,4],[57,0,107,3],[57,5,28,29],[58,0,112,2,"jumpTo"],[58,4,112,2,"jumpTo"],[58,10,28,29],[58,28,112,9,"state"],[58,33,28,29],[58,35,112,33,"key"],[58,38,28,29],[58,40,112,63],[59,0,113,4],[59,10,113,10,"index"],[59,15,113,15],[59,18,113,18,"NavigationStateUtils"],[59,38,113,38],[59,39,113,39,"indexOf"],[59,46,113,18],[59,47,113,47,"state"],[59,52,113,18],[59,54,113,54,"key"],[59,57,113,18],[59,58,113,4],[60,0,114,4],[60,13,114,11,"NavigationStateUtils"],[60,33,114,31],[60,34,114,32,"jumpToIndex"],[60,45,114,11],[60,46,114,44,"state"],[60,51,114,11],[60,53,114,51,"index"],[60,58,114,11],[60,59,114,4],[61,0,115,3],[61,5,28,29],[62,0,120,2,"back"],[62,4,120,2,"back"],[62,8,28,29],[62,24,120,7,"state"],[62,29,28,29],[62,31,120,48],[63,0,121,4],[63,10,121,10,"index"],[63,15,121,15],[63,18,121,18,"state"],[63,23,121,23],[63,24,121,24,"index"],[63,29,121,18],[63,32,121,32],[63,33,121,4],[64,0,122,4],[64,10,122,10,"route"],[64,15,122,15],[64,18,122,18,"state"],[64,23,122,23],[64,24,122,24,"routes"],[64,30,122,18],[64,31,122,31,"index"],[64,36,122,18],[64,37,122,4],[65,0,123,4],[65,13,123,11,"route"],[65,18,123,16],[65,21,123,19,"NavigationStateUtils"],[65,41,123,39],[65,42,123,40,"jumpToIndex"],[65,53,123,19],[65,54,123,52,"state"],[65,59,123,19],[65,61,123,59,"index"],[65,66,123,19],[65,67,123,16],[65,70,123,68,"state"],[65,75,123,4],[66,0,124,3],[66,5,28,29],[67,0,129,2,"forward"],[67,4,129,2,"forward"],[67,11,28,29],[67,30,129,10,"state"],[67,35,28,29],[67,37,129,51],[68,0,130,4],[68,10,130,10,"index"],[68,15,130,15],[68,18,130,18,"state"],[68,23,130,23],[68,24,130,24,"index"],[68,29,130,18],[68,32,130,32],[68,33,130,4],[69,0,131,4],[69,10,131,10,"route"],[69,15,131,15],[69,18,131,18,"state"],[69,23,131,23],[69,24,131,24,"routes"],[69,30,131,18],[69,31,131,31,"index"],[69,36,131,18],[69,37,131,4],[70,0,132,4],[70,13,132,11,"route"],[70,18,132,16],[70,21,132,19,"NavigationStateUtils"],[70,41,132,39],[70,42,132,40,"jumpToIndex"],[70,53,132,19],[70,54,132,52,"state"],[70,59,132,19],[70,61,132,59,"index"],[70,66,132,19],[70,67,132,16],[70,70,132,68,"state"],[70,75,132,4],[71,0,133,3],[71,5,28,29],[72,0,140,2,"replaceAt"],[72,4,140,2,"replaceAt"],[72,13,28,29],[72,34,141,4,"state"],[72,39,28,29],[72,41,142,4,"key"],[72,44,28,29],[72,46,143,4,"route"],[72,51,28,29],[72,53,144,21],[73,0,145,4],[73,10,145,10,"index"],[73,15,145,15],[73,18,145,18,"NavigationStateUtils"],[73,38,145,38],[73,39,145,39,"indexOf"],[73,46,145,18],[73,47,145,47,"state"],[73,52,145,18],[73,54,145,54,"key"],[73,57,145,18],[73,58,145,4],[74,0,146,4],[74,13,146,11,"NavigationStateUtils"],[74,33,146,31],[74,34,146,32,"replaceAtIndex"],[74,48,146,11],[74,49,146,47,"state"],[74,54,146,11],[74,56,146,54,"index"],[74,61,146,11],[74,63,146,61,"route"],[74,68,146,11],[74,69,146,4],[75,0,147,3],[75,5,28,29],[76,0,154,2,"replaceAtIndex"],[76,4,154,2,"replaceAtIndex"],[76,18,28,29],[76,44,155,4,"state"],[76,49,28,29],[76,51,156,4,"index"],[76,56,28,29],[76,58,157,4,"route"],[76,63,28,29],[76,65,158,21],[77,0,159,4,"invariant"],[77,6,159,4,"invariant"],[77,15,159,13],[77,16,160,6],[77,17,160,7],[77,18,160,8,"state"],[77,23,160,13],[77,24,160,14,"routes"],[77,30,160,8],[77,31,160,21,"index"],[77,36,160,8],[77,37,159,13],[77,39,161,6],[77,80,159,13],[77,82,162,6,"index"],[77,87,159,13],[77,89,163,6,"route"],[77,94,163,11],[77,95,163,12,"key"],[77,98,159,13],[77,99,159,4],[79,0,166,4],[79,10,166,8,"state"],[79,15,166,13],[79,16,166,14,"routes"],[79,22,166,8],[79,23,166,21,"index"],[79,28,166,8],[79,34,166,32,"route"],[79,39,166,4],[79,41,166,39],[80,0,167,6],[80,15,167,13,"state"],[80,20,167,6],[81,0,168,5],[83,0,170,4],[83,10,170,10,"routes"],[83,16,170,16],[83,19,170,19,"state"],[83,24,170,24],[83,25,170,25,"routes"],[83,31,170,19],[83,32,170,32,"slice"],[83,37,170,19],[83,39,170,4],[84,0,171,4,"routes"],[84,6,171,4,"routes"],[84,12,171,10],[84,13,171,11,"index"],[84,18,171,10],[84,19,171,4],[84,22,171,20,"route"],[84,27,171,4],[85,0,173,4],[85,31,174,9,"state"],[85,36,173,4],[86,0,175,6,"index"],[86,8,175,6,"index"],[86,13,175,11],[86,15,175,6,"index"],[86,20,173,4],[87,0,176,6,"routes"],[87,8,176,6,"routes"],[87,14,176,12],[87,16,176,6,"routes"],[88,0,173,4],[89,0,178,3],[89,5,28,29],[90,0,185,2,"reset"],[90,4,185,2,"reset"],[90,9,28,29],[90,26,186,4,"state"],[90,31,28,29],[90,33,187,4,"routes"],[90,39,28,29],[90,41,188,4,"index"],[90,46,28,29],[90,48,189,21],[91,0,190,4,"invariant"],[91,6,190,4,"invariant"],[91,15,190,13],[91,16,191,6,"routes"],[91,22,191,12],[91,23,191,13,"length"],[91,29,191,6],[91,33,191,23,"Array"],[91,38,191,28],[91,39,191,29,"isArray"],[91,46,191,23],[91,47,191,37,"routes"],[91,53,191,23],[91,54,190,13],[91,56,192,6],[91,83,190,13],[91,84,190,4],[92,0,195,4],[92,10,195,10,"nextIndex"],[92,19,195,27],[92,22,195,30,"index"],[92,27,195,35],[92,32,195,40,"undefined"],[92,41,195,30],[92,44,195,52,"routes"],[92,50,195,58],[92,51,195,59,"length"],[92,57,195,52],[92,60,195,68],[92,61,195,30],[92,64,195,72,"index"],[92,69,195,4],[94,0,197,4],[94,10,197,8,"state"],[94,15,197,13],[94,16,197,14,"routes"],[94,22,197,8],[94,23,197,21,"length"],[94,29,197,8],[94,34,197,32,"routes"],[94,40,197,38],[94,41,197,39,"length"],[94,47,197,8],[94,51,197,49,"state"],[94,56,197,54],[94,57,197,55,"index"],[94,62,197,49],[94,67,197,65,"nextIndex"],[94,76,197,4],[94,78,197,76],[95,0,198,6],[95,12,198,12,"compare"],[95,19,198,19],[95,22,198,22],[95,31,198,12,"compare"],[95,38,198,22],[95,39,198,23,"route"],[95,44,198,22],[95,46,198,30,"ii"],[95,48,198,22],[96,0,198,22],[96,17,198,37,"routes"],[96,23,198,43],[96,24,198,44,"ii"],[96,26,198,43],[96,27,198,37],[96,32,198,52,"route"],[96,37,198,22],[97,0,198,22],[97,9,198,6],[99,0,199,6],[99,12,199,10,"state"],[99,17,199,15],[99,18,199,16,"routes"],[99,24,199,10],[99,25,199,23,"every"],[99,30,199,10],[99,31,199,29,"compare"],[99,38,199,10],[99,39,199,6],[99,41,199,39],[100,0,200,8],[100,17,200,15,"state"],[100,22,200,8],[101,0,201,7],[102,0,202,5],[104,0,204,4,"invariant"],[104,6,204,4,"invariant"],[104,15,204,13],[104,16,204,14],[104,17,204,15],[104,18,204,16,"routes"],[104,24,204,22],[104,25,204,23,"nextIndex"],[104,34,204,22],[104,35,204,13],[104,37,204,35],[104,64,204,13],[104,66,204,64,"nextIndex"],[104,75,204,13],[104,76,204,4],[105,0,206,4],[105,31,207,9,"state"],[105,36,206,4],[106,0,208,6,"index"],[106,8,208,6,"index"],[106,13,208,11],[106,15,208,13,"nextIndex"],[106,24,206,4],[107,0,209,6,"routes"],[107,8,209,6,"routes"],[107,14,209,12],[107,16,209,6,"routes"],[108,0,206,4],[109,0,211,3],[110,0,28,29],[110,3,28,0],[111,0,214,0,"module"],[111,2,214,0,"module"],[111,8,214,6],[111,9,214,7,"exports"],[111,16,214,0],[111,19,214,17,"NavigationStateUtils"],[111,39,214,0]]},"type":"js/module"}]}